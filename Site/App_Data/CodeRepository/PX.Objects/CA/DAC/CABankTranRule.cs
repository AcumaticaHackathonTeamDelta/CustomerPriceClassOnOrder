using System;
using System.Text.RegularExpressions;

using PX.Data;
using PX.Objects.GL;

namespace PX.Objects.CA
{
    /// <summary>
    /// Represents the rules used to automatically generate documents
    /// from the <see cref="CABankTran">Bank Transactions</see> during
    /// the Auto-Matching process.
    /// </summary>
    [Serializable]
    [PXPrimaryGraph(typeof(CABankTranRuleMaint))]
    [PXCacheName("CA Bank Transactions Rule")]
    public partial class CABankTranRule : IBqlTable
    {
        #region RuleID
        public abstract class ruleID : IBqlField { }
        protected int? _RuleID;

        /// <summary>
        /// Identifier of the rule. Database autogenerated identity key.
        /// </summary>
        [PXDBIdentity]
        public virtual int? RuleID
        {
            get { return _RuleID; }
            set { _RuleID = value; }
        }
        #endregion

        #region RuleCD
        public abstract class ruleCD : IBqlField { }
        protected string _RuleCD;

        /// <summary>
        /// Natural identifier of the rule, visible to user.
        /// </summary>
        [PXSelector(typeof(CABankTranRule.ruleCD),
            typeof(CABankTranRule.ruleCD),
            typeof(CABankTranRule.description),
            SubstituteKey = typeof(CABankTranRule.ruleCD),
            DescriptionField = typeof(CABankTranRule.description))]
        [PXDBString(30, IsUnicode = true, IsKey = true)]
        [PXDefault]
        [PXUIField(DisplayName = "Rule", Visibility = PXUIVisibility.SelectorVisible)]
        public virtual string RuleCD
        {
            get { return _RuleCD; }
            set { _RuleCD = value; }
        }
        #endregion

        #region Description
        public abstract class description : IBqlField { }
        protected string _Description;

        /// <summary>
        /// Description of the rule. Does not affect any functionality.
        /// </summary>
        [PXDBString(256, IsUnicode = true)]
        [PXUIField(DisplayName = "Description")]
        public virtual string Description
        {
            get { return _Description; }
            set { _Description = value; }
        }
        #endregion

        #region IsActive

        public abstract class isActive : IBqlField { }

        protected bool? _IsActive;

        [PXDBBool]
        [PXDefault(true)]
        [PXUIField(DisplayName = "Active")]
        public virtual bool? IsActive
        {
            get { return _IsActive; }
            set { _IsActive = value; }
        }
        #endregion

        #region BankTranCashAccountID
        public abstract class bankTranCashAccountID : IBqlField { }

        protected int? _BankTranCashAccountID;

        /// <summary>
        /// The <see cref="CashAccount">Cash Account</see> for the rule. When specified, the rule will be applied
        /// only to the transactions on this Cash Account.
        /// </summary>
        /// <value>
        /// Corresponds to the <see cref="CashAccount.CashAccountID"/> field.
        /// </value>
        [CashAccount]
        public virtual int? BankTranCashAccountID
        {
            get { return _BankTranCashAccountID; }
            set { _BankTranCashAccountID = value; }
        }
        #endregion

        #region BankDrCr
        public abstract class bankDrCr : IBqlField { }
        protected string _BankDrCr;

        /// <summary>
        /// Indicates whether this rule should be applied to receipt or disbursement bank transactions.
        /// </summary>
        /// <value>
        /// Corresponds to the <see cref="CABankTran.DrCr"/> field. Mandatory.
        /// </value>
        [PXDBString(1, IsFixed = true)]
        [PXDefault(CADrCr.CACredit)]
        [CADrCr.List()]
        [PXUIField(DisplayName = "Debit/Credit")]
        public virtual string BankDrCr
        {
            get { return _BankDrCr; }
            set { _BankDrCr = value; }
        }
        #endregion

        #region TranCuryID
        public abstract class tranCuryID : IBqlField { }
        protected string _TranCuryID;

        /// <summary>
        /// Code of the <see cref="PX.Objects.CM.Currency">Currency</see>.
        /// If specified, the rule will be applied only to the transactions in the respective currency.
        /// </summary>
        [PXDBString(5, IsUnicode = true)]
        [PXSelector(typeof(PX.Objects.CM.Currency.curyID))]
        [PXUIField(DisplayName = "Currency")]
        public virtual string TranCuryID
        {
            get { return _TranCuryID; }
            set { _TranCuryID = value; }
        }
        #endregion

        #region AmountMatchingMode
        public abstract class amountMatchingMode : IBqlField { }

        protected string _AmountMatchingMode;

        [PXDBString(1, IsFixed = true)]
        [PXDefault(MatchingMode.None)]
        [MatchingMode.Amount]
        [PXUIField(DisplayName = "Amount Matching Mode")]
        public virtual string AmountMatchingMode
        {
            get { return _AmountMatchingMode; }
            set { _AmountMatchingMode = value; }
        }
        #endregion

        #region CuryTranAmt
        public abstract class curyTranAmt : IBqlField { }
        protected decimal? _CuryTranAmt;

        /// <summary>
        /// Transaction amount in the currency of the transaction.
        /// When specified together with appropriate value in the <see cref="AmountMatchingMode"/> field,
        /// the rule will be applied only to the transactions with matching amount.
        /// In case the <see cref="AmountMatchingMode"/> is set to "Between",
        /// the value in this field is used as a lower bound for transaction amount.
        /// </summary>
        /// <value>
        /// Corresponds to the <see cref="CABankTran.CuryTranAmt"/> field.
        /// </value>
        [PXDBDecimal(4)]
        [PXDefault]
        [PXUIField(DisplayName = "Amount")]
        public virtual decimal? CuryTranAmt
        {
            get { return _CuryTranAmt; }
            set { _CuryTranAmt = value; }
        }
        #endregion

        #region MaxCuryTranAmt
        public abstract class maxCuryTranAmt : IBqlField { }
        protected decimal? _MaxCuryTranAmt;

        /// <summary>
        /// Maximum transaction amount in the currency of the transaction, which the rule should match.
        /// Used only when the <see cref="AmountMatchingMode"/> is set to "Between"
        /// </summary>
        /// <value>
        /// Matching is done on the <see cref="CABankTran.CuryTranAmt"/> field.
        /// </value>
        [PXDBDecimal(4)]
        [PXDefault]
        [PXUIField(DisplayName = "Max. Amount")]
        public virtual decimal? MaxCuryTranAmt
        {
            get { return _MaxCuryTranAmt; }
            set { _MaxCuryTranAmt = value; }
        }
        #endregion

        #region TranCode
        public abstract class tranCode : PX.Data.IBqlField
        {
        }
        protected String _TranCode;

        /// <summary>
        /// The transaction code that the rule should match.
        /// </summary>
        /// <value>
        /// Corresponds to the <see cref="CABankTran.TranCode"/> field.
        /// </value>
        [PXDBString(35, IsUnicode = true)]
        [PXUIField(DisplayName = "Tran. Code")]
        public virtual String TranCode
        {
            get
            {
                return this._TranCode;
            }
            set
            {
                this._TranCode = value;
            }
        }
        #endregion

        #region BankTranDescription
        public abstract class bankTranDescription : IBqlField { }
        protected string _BankTranDescription;


        /// <summary>
        /// Represents the text used to identify transactions, to which the rule should be applied.
        /// Transaction must contain the text in the <see cref="CABankTran.TranDesc">description</see>.
        /// </summary>
        [PXDBString(256, IsUnicode = true)]
        [PXUIField(DisplayName = "Description")]
        public virtual string BankTranDescription
        {
            get { return _BankTranDescription; }
            set { _BankTranDescription = value; }
        }
        #endregion

        #region MatchDescriptionCase
        public abstract class matchDescriptionCase : IBqlField { }
        protected bool? _MatchDescriptionCase;

        /// <summary>
        /// Indicates whether the case should be matched when the system attempts to apply the rule.
        /// </summary>
        /// <value>
        /// When set to <c>true</c> the <see cref="CABankTran.TranDesc">description</see> of the transactions
        /// will be scanned for presence of the <see cref="BankTranDescription">specified text</see>
        /// with respect to case. Otherwise, the case will be ignored during string comparison.
        /// Defaults to <c>false</c>.
        /// </value>
        [PXDBBool]
        [PXDefault(false)]
        [PXUIField(DisplayName = "Match Case")]
        public virtual bool? MatchDescriptionCase
        {
            get { return _MatchDescriptionCase; }
            set { _MatchDescriptionCase = value; }
        }
        #endregion

		#region UseDescriptionWildcards
		public abstract class useDescriptionWildcards : IBqlField { }
		protected bool? _UseDescriptionWildcards;

		/// <summary>
		/// When set to <c>true</c>, indicates that the system must treat '*' and '?' characters in the <see cref="BankTranDescription" />
		/// as wildcards ('*' matches 0 or more arbitrary symbols, '?' matches one arbitrary symbol).
		/// </summary>
		/// <value>
		/// Defaults to <c>false</c>.
		/// </value>
		[PXDBBool]
		[PXDefault(false)]
		[PXUIField(DisplayName = "Use Wildcards")]
		public virtual bool? UseDescriptionWildcards
		{
			get { return _UseDescriptionWildcards; }
			set { _UseDescriptionWildcards = value; }
		}

		#endregion

        #region Pattern

        private string Pattern
        {
            get
            {
				var escaped = Regex.Escape(BankTranDescription ?? "");

				return UseDescriptionWildcards == true ?
					"^" + escaped.Replace("\\*", ".*").Replace("\\?", ".") + "$"
					: escaped;
            }
        }

        public Regex Regex
        {
            get
            {
                return new Regex(Pattern,
                    MatchDescriptionCase == true ? new RegexOptions() : RegexOptions.IgnoreCase);
            }
        }

        #endregion

        #region action
        public abstract class action : IBqlField { }

        protected string _Action;

        [PXDBString(1, IsFixed = true)]
        [PXUIField(DisplayName = "Action")]
        [PXDefault(RuleAction.CreateDocument)]
        [RuleAction.List]
        public virtual string Action
        {
            get { return _Action; }
            set { _Action = value; }
        }
        #endregion

        #region DocumentModule
        public abstract class documentModule : IBqlField { }
        protected string _DocumentModule;


        /// <summary>
        /// The module of the document generated by the rule.
        /// </summary>
        /// <value>
        /// Default is "CA". Now this is the only supported value. Mandatory.
        /// </value>
        [PXDBString(2, IsFixed = true)]
        [PXDefault(BatchModule.CA)]
        [PXUIField(DisplayName = "Resulting Document Module", Visible = false, Enabled = false)]
        public virtual string DocumentModule
        {
            get { return _DocumentModule; }
            set { _DocumentModule = value; }
        }
        #endregion

        #region DocumentEntryTypeID
        public abstract class documentEntryTypeID : IBqlField { }
        protected string _DocumentEntryTypeID;


        /// <summary>
        /// Identifier of the <see cref="CAEntryType"/> of the document generated by the rule.
        /// </summary>
        /// <value>
        /// Corresponds to the <see cref="CAEntryType.EntryTypeID"/> field. Mandatory.
        /// </value>
        [PXDBString(10, IsUnicode = true)]
        [PXSelector(typeof(
			Search2<CAEntryType.entryTypeId,
			LeftJoin<CashAccountETDetail, On<CashAccountETDetail.entryTypeID, Equal<CAEntryType.entryTypeId>,
			And<CashAccountETDetail.accountID, Equal<Current<CABankTranRule.bankTranCashAccountID>>>>>,
				Where<CAEntryType.module, Equal<Current<CABankTranRule.documentModule>>,
					And<CAEntryType.drCr, Equal<Current<CABankTranRule.bankDrCr>>,
					And<Where<CashAccountETDetail.accountID, Equal<Current<CABankTranRule.bankTranCashAccountID>>, 
					Or<Current<CABankTranRule.bankTranCashAccountID>,IsNull>>>>>>),
            DescriptionField = typeof(CAEntryType.descr))]
        [PXUIField(DisplayName = "Resulting Entry Type")]
        [PXDefault]
        public virtual string DocumentEntryTypeID
        {
            get { return _DocumentEntryTypeID; }
            set { _DocumentEntryTypeID = value; }
        }
        #endregion
        #region NoteID
        public abstract class noteID : PX.Data.IBqlField
        {
        }
        protected Guid? _NoteID;

        [PXNote()]
        public virtual Guid? NoteID
        {
            get
            {
                return this._NoteID;
            }
            set
            {
                this._NoteID = value;
            }
        }
        #endregion
        #region CreatedByID
        public abstract class createdByID : PX.Data.IBqlField
        {
        }
        protected Guid? _CreatedByID;
        [PXDBCreatedByID()]
        public virtual Guid? CreatedByID
        {
            get
            {
                return this._CreatedByID;
            }
            set
            {
                this._CreatedByID = value;
            }
        }
        #endregion
        #region CreatedByScreenID
        public abstract class createdByScreenID : PX.Data.IBqlField
        {
        }
        protected String _CreatedByScreenID;
        [PXDBCreatedByScreenID()]
        public virtual String CreatedByScreenID
        {
            get
            {
                return this._CreatedByScreenID;
            }
            set
            {
                this._CreatedByScreenID = value;
            }
        }
        #endregion
        #region CreatedDateTime
        public abstract class createdDateTime : PX.Data.IBqlField
        {
        }
        protected DateTime? _CreatedDateTime;

        [PXDBCreatedDateTime()]
        public virtual DateTime? CreatedDateTime
        {
            get
            {
                return this._CreatedDateTime;
            }
            set
            {
                this._CreatedDateTime = value;
            }
        }
        #endregion
        #region LastModifiedByID
        public abstract class lastModifiedByID : PX.Data.IBqlField
        {
        }
        protected Guid? _LastModifiedByID;
        [PXDBLastModifiedByID()]
        public virtual Guid? LastModifiedByID
        {
            get
            {
                return this._LastModifiedByID;
            }
            set
            {
                this._LastModifiedByID = value;
            }
        }
        #endregion
        #region LastModifiedByScreenID
        public abstract class lastModifiedByScreenID : PX.Data.IBqlField
        {
        }
        protected String _LastModifiedByScreenID;
        [PXDBLastModifiedByScreenID()]
        public virtual String LastModifiedByScreenID
        {
            get
            {
                return this._LastModifiedByScreenID;
            }
            set
            {
                this._LastModifiedByScreenID = value;
            }
        }
        #endregion
        #region LastModifiedDateTime
        public abstract class lastModifiedDateTime : PX.Data.IBqlField
        {
        }
        protected DateTime? _LastModifiedDateTime;
        [PXDBLastModifiedDateTime()]
        public virtual DateTime? LastModifiedDateTime
        {
            get
            {
                return this._LastModifiedDateTime;
            }
            set
            {
                this._LastModifiedDateTime = value;
            }
        }
        #endregion
        #region tstamp
        public abstract class Tstamp : PX.Data.IBqlField
        {
        }
        protected Byte[] _tstamp;
        [PXDBTimestamp()]
        public virtual Byte[] tstamp
        {
            get
            {
                return this._tstamp;
            }
            set
            {
                this._tstamp = value;
            }
        }
        #endregion
    }
	[Serializable]
	[PXPrimaryGraph(typeof(CABankTranRuleMaintPopup))]
	public partial class CABankTranRulePopup : CABankTranRule
	{ }
    public class MatchingMode
    {
        public class AmountAttribute : PXStringListAttribute
        {
            public AmountAttribute()
                : base(new[] { None, Equal, Between },
						new[] { Messages.MatchModeNone, Messages.MatchModeEqual, Messages.MatchModeBetween })
            {
            }
        }

        public const string None = "N";
        public const string Equal = "E";
        public const string Between = "B";
    }

    public class RuleAction
    {
        public class ListAttribute : PXStringListAttribute
        {
            public ListAttribute()
                : base(new[] { CreateDocument, HideTransaction },
                       new[] { Messages.CreateDocument, Messages.HideTran })
            {
            }
        }

        public const string CreateDocument = "C";
        public const string HideTransaction = "H";
    }
}
